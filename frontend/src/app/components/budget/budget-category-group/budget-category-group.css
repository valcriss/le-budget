/* Collapse animation scoped to the category-group-content container so it doesn't
   accidentally match or apply to nested component hosts. Using the id selector
   ensures the rules target only that specific element. */
#category-group-content.collapse {
	/* container now only controls height/overflow. Avoid animating container opacity
	   because that hides descendant component hosts in some browsers/encapsulation
	   models. */
	max-height: 0;
	overflow: hidden;
	transition: max-height 300ms cubic-bezier(.2,.9,.2,1);
}
#category-group-content.collapse.open {
	/* large enough to contain inner content; kept high to avoid clipping during
	   transitions. If you prefer an exact fit, we can replace this with a
	   JS-measured height animation. */
	max-height: 2000px;
	overflow: visible;
}

/* Animate the inner wrapper instead of the container so opacity/transform
   transitions don't affect the element hosts of nested components. The inner
   content is visible by default on initial render; the TS will apply inline
   styles to animate it when opening/closing so we don't hide it unintentionally.
*/
#category-group-content > .collapse-inner {
	transform-origin: top center;
	transition: transform 220ms cubic-bezier(.2,.9,.2,1), opacity 200ms ease;
	opacity: 1;
	transform: translateY(0);
}

/* rotate chevron when open */
.rotate-open {
  transform: rotate(90deg);
  transition: transform 200ms cubic-bezier(.2,.9,.2,1);
}

/* ensure icon rotates around its center */
.chevron-icon {
	display: inline-block;
	transition: transform 200ms cubic-bezier(.2,.9,.2,1);
	transform-origin: center;
}
